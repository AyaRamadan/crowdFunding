# Generated by Django 3.0.4 on 2020-03-21 14:40

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='project_tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'project_tags',
            },
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(max_length=100)),
                ('Details', models.TextField()),
                ('target', models.IntegerField()),
                ('start_date', models.DateField(default='2020-03-21')),
                ('end_date', models.DateField(default='2020-03-21')),
                ('report', models.IntegerField(null=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Projects.Categories')),
            ],
            options={
                'db_table': 'Projects',
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, null=True)),
            ],
            options={
                'db_table': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='user_donations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Amount', models.IntegerField()),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Projects.Projects')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.Users')),
            ],
            options={
                'db_table': 'User_Donations',
                'unique_together': {('user', 'project')},
            },
        ),
        migrations.CreateModel(
            name='Rates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.DecimalField(decimal_places=1, max_digits=3)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Projects.Projects')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.Users')),
            ],
            options={
                'db_table': 'Project_Rates',
            },
        ),
        migrations.AddField(
            model_name='projects',
            name='donations',
            field=models.ManyToManyField(related_name='UserDonations', through='Projects.user_donations', to='Users.Users'),
        ),
        migrations.AddField(
            model_name='projects',
            name='tags',
            field=models.ManyToManyField(through='Projects.project_tags', to='Projects.Tags'),
        ),
        migrations.AddField(
            model_name='projects',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='UserID', to='Users.Users'),
        ),
        migrations.AddField(
            model_name='project_tags',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Projects.Projects'),
        ),
        migrations.AddField(
            model_name='project_tags',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Projects.Tags'),
        ),
        migrations.CreateModel(
            name='Pictures',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('image', models.ImageField(null=True, upload_to='images/projects', verbose_name='image')),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Images_project', to='Projects.Projects')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Users.Users')),
            ],
            options={
                'db_table': 'Project_Pictures',
            },
        ),
        migrations.CreateModel(
            name='Featured_projects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('featured', models.BooleanField()),
                ('featured_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Projects.Projects')),
            ],
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('report', models.IntegerField(null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Projects.Projects')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.Users')),
            ],
            options={
                'db_table': 'Project_Comments',
            },
        ),
        migrations.AlterUniqueTogether(
            name='project_tags',
            unique_together={('tag', 'project')},
        ),
    ]
